Resources:
  VPC:
      Type: "AWS::EC2::VPC"
      Properties:
        EnableDnsSupport: "true"
        EnableDnsHostnames: "true"
        CidrBlock: "10.0.0.0/22"

#subnet
  PublicSubnet0:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: "us-east-1a"
        CidrBlock: "10.0.0.0/25"
        MapPublicIpOnLaunch: "true"
  PublicSubnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: "us-east-1b"
        CidrBlock: "10.0.1.0/25"
        MapPublicIpOnLaunch: "true"
  PrivateSubnet0:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: "us-east-1a"
        CidrBlock: "10.0.0.128/25"
  PrivateSubnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: "us-east-1b"
        CidrBlock: "10.0.1.128/25"

#route table
  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
    DependsOn: VPC
  privateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
    DependsOn: VPC

#route table and subnet association
  publicSubnet0RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref publicRouteTable
  publicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref publicRouteTable

  privateSubnet0RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet0
      RouteTableId: !Ref privateRouteTable
  privateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref privateRouteTable



#InternetgateWay
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  
  myInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref VPC
    DependsOn: myInternetGateway

#nat gateway
  NAT:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
         Fn::GetAtt:
         - EIP
         - AllocationId
      SubnetId: !Ref PublicSubnet0
    
  EIP:
    DependsOn: myInternetGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc

#setting routes
  RoutePrivate:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref privateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NAT
  RoutePublic:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref publicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref myInternetGateway
  
#auto scalling
  ASG:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties: 
            AutoScalingGroupName: "asg"
            DesiredCapacity: 2
            MaxSize: "5"
            MinSize: "1"
            HealthCheckGracePeriod: 300
            LaunchTemplate: 
                LaunchTemplateId: !Ref myLaunchTemplate
                Version: !GetAtt myLaunchTemplate.LatestVersionNumber
            # LoadBalancerNames: 
            #     - String
            # TargetGroupARNs: 
            #     - String
            VPCZoneIdentifier: 
                - !Ref PrivateSubnet0
                - !Ref PrivateSubnet0
  myLaunchTemplate:
      Type: AWS::EC2::LaunchTemplate
      Properties: 
            LaunchTemplateName: !Sub launch-template
            LaunchTemplateData: 
                ImageId: ami-04902260ca3d33422
                InstanceType: t2.micro


#database
  MyDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: db
      DBName: db
      DBInstanceClass: db.t2.micro
      AllocatedStorage: "20"
      Engine: MySQL
      EngineVersion: 8.0.16
      MasterUsername: admin
      MasterUserPassword: password
